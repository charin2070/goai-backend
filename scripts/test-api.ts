// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
// –ó–∞–ø—É—Å–∫: npx ts-node scripts/test-api.ts

const API_BASE = 'http://localhost:3000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url: string, options: RequestInit = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });
    
    const data = await response.json();
    return { status: response.status, data };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { status: 500, data: { error: 'Network error' } };
  }
}

async function testAPI() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...\n');

  // 1. –¢–µ—Å—Ç GET /api/issues (–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á)
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/issues');
  const getAllResult = await makeRequest(`${API_BASE}/issues`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${getAllResult.status}`);
  console.log(`   –î–∞–Ω–Ω—ã–µ:`, getAllResult.data);
  console.log('');

  // 2. –¢–µ—Å—Ç POST /api/issues (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏)
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/issues');
  const testIssue = {
    summary: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ API',
    description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
    priority: 'High',
    status: 'Open',
    type: 'Bug',
    assignee: 'test-user'
  };
  
  const createResult = await makeRequest(`${API_BASE}/issues`, {
    method: 'POST',
    body: JSON.stringify(testIssue),
  });
  console.log(`   –°—Ç–∞—Ç—É—Å: ${createResult.status}`);
  console.log(`   –î–∞–Ω–Ω—ã–µ:`, createResult.data);
  
  const createdIssueId = createResult.data?.data?.id;
  console.log('');

  if (createdIssueId) {
    // 3. –¢–µ—Å—Ç GET /api/issues/[id] (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏)
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/issues/[id]');
    const getOneResult = await makeRequest(`${API_BASE}/issues/${createdIssueId}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${getOneResult.status}`);
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, getOneResult.data);
    console.log('');

    // 4. –¢–µ—Å—Ç PUT /api/issues/[id] (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏)
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT /api/issues/[id]');
    const updateData = {
      summary: '–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
      status: 'In Progress',
      priority: 'Medium'
    };
    
    const updateResult = await makeRequest(`${API_BASE}/issues/${createdIssueId}`, {
      method: 'PUT',
      body: JSON.stringify(updateData),
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${updateResult.status}`);
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, updateResult.data);
    console.log('');

    // 5. –¢–µ—Å—Ç DELETE /api/issues/[id] (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏)
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /api/issues/[id]');
    const deleteResult = await makeRequest(`${API_BASE}/issues/${createdIssueId}`, {
      method: 'DELETE',
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${deleteResult.status}`);
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, deleteResult.data);
    console.log('');
  }

  // 6. –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ 404 (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID)
  console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É 404 (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID)');
  const notFoundResult = await makeRequest(`${API_BASE}/issues/99999`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${notFoundResult.status}`);
  console.log(`   –î–∞–Ω–Ω—ã–µ:`, notFoundResult.data);
  console.log('');

  // 7. –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (POST –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è)
  console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (POST –±–µ–∑ summary)');
  const invalidIssue = {
    description: '–ó–∞–¥–∞—á–∞ –±–µ–∑ summary - –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É',
    priority: 'Low'
  };
  
  const validationErrorResult = await makeRequest(`${API_BASE}/issues`, {
    method: 'POST',
    body: JSON.stringify(invalidIssue),
  });
  console.log(`   –°—Ç–∞—Ç—É—Å: ${validationErrorResult.status}`);
  console.log(`   –î–∞–Ω–Ω—ã–µ:`, validationErrorResult.data);
  console.log('');

  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function checkServerAndRunTests() {
  try {
    const healthCheck = await fetch('http://localhost:3000/api/uptime');
    if (healthCheck.ok) {
      await testAPI();
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω npm run dev');
    }
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run dev –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
  }
}

checkServerAndRunTests(); 