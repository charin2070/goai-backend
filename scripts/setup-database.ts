import postgres from 'postgres';
import fs from 'fs';
import path from 'path';

async function setupDatabase() {
  const connectionString = process.env.POSTGRES_URL || 'postgresql://goai_user:GggodbStrong0@194.54.158.82:5432/goai_db';
  
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', connectionString.replace(/\/\/.*@/, '//***@'));
  
  try {
    const client = postgres(connectionString);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ ENUM —Ç–∏–ø–∞
    console.log('üìù –°–æ–∑–¥–∞–µ–º ENUM —Ç–∏–ø status...');
    try {
      await client`CREATE TYPE status AS ENUM ('active', 'inactive', 'archived')`;
      console.log('‚úÖ ENUM —Ç–∏–ø status —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è ENUM —Ç–∏–ø status —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã products
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É products...');
    try {
      await client`
        CREATE TABLE IF NOT EXISTS products (
          id SERIAL PRIMARY KEY,
          image_url TEXT NOT NULL,
          name TEXT NOT NULL,
          status status NOT NULL,
          price NUMERIC(10, 2) NOT NULL,
          stock INTEGER NOT NULL,
          available_at TIMESTAMP NOT NULL
        )
      `;
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ products —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
      throw error;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('üìù –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    try {
      await client`CREATE INDEX IF NOT EXISTS idx_products_name ON products(name)`;
      await client`CREATE INDEX IF NOT EXISTS idx_products_status ON products(status)`;
      await client`CREATE INDEX IF NOT EXISTS idx_products_price ON products(price)`;
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...');
    try {
      await client`COMMENT ON TABLE products IS '–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è GoAI-Backend'`;
      await client`COMMENT ON COLUMN products.id IS '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞'`;
      await client`COMMENT ON COLUMN products.image_url IS 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞'`;
      await client`COMMENT ON COLUMN products.name IS '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'`;
      await client`COMMENT ON COLUMN products.status IS '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (active, inactive, archived)'`;
      await client`COMMENT ON COLUMN products.price IS '–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π'`;
      await client`COMMENT ON COLUMN products.stock IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ'`;
      await client`COMMENT ON COLUMN products.available_at IS '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞'`;
      console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const tableInfo = await client`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_name = 'products'
      ORDER BY ordinal_position
    `;
    
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã products:');
    tableInfo.forEach((col, index) => {
      console.log(`   ${index + 1}. ${col.column_name} (${col.data_type}) ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`);
    });
    
    await client.end();
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

setupDatabase().then(success => {
  console.log('\n' + '='.repeat(50));
  console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${success ? '‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê' : '‚ùå –û–®–ò–ë–ö–ê'}`);
  console.log('='.repeat(50));
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 