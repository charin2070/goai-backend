import postgres from 'postgres';

async function checkDatabase() {
  const connectionString = process.env.POSTGRES_URL || 'postgresql://goai_user:GggodbStrong0@194.54.158.82:5432/goai_db';
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  console.log('üåê –°–µ—Ä–≤–µ—Ä:', connectionString.replace(/\/\/.*@/, '//***@'));
  
  try {
    const client = postgres(connectionString);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    const result = await client`SELECT 1 as test`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã products
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É products...');
    const tableCheck = await client`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'products'
      );
    `;
    
    const tableExists = tableCheck[0].exists;
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ products: ${tableExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
    
    let recordCount = 0;
    if (tableExists) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
      console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ products...');
      const countResult = await client`SELECT COUNT(*) as count FROM products`;
      recordCount = parseInt(countResult[0].count);
      console.log(`üìà –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ products: ${recordCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM —Ç–∏–ø–∞
    console.log('üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º ENUM —Ç–∏–ø status...');
    const enumCheck = await client`
      SELECT EXISTS (
        SELECT FROM pg_type 
        WHERE typname = 'status'
      );
    `;
    
    const enumExists = enumCheck[0].exists;
    console.log(`üîñ ENUM —Ç–∏–ø status: ${enumExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    await client.end();
    
    return {
      connected: true,
      tableExists,
      enumExists,
      recordCount
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
    return {
      connected: false,
      error: error.message
    };
  }
}

checkDatabase().then(result => {
  console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:');
  console.log('='.repeat(30));
  console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${result.connected ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
  if (result.connected) {
    console.log(`–¢–∞–±–ª–∏—Ü–∞ products: ${result.tableExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
    console.log(`ENUM status: ${result.enumExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    if (result.tableExists) {
      console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –ë–î: ${result.recordCount}`);
    }
  } else {
    console.log(`–û—à–∏–±–∫–∞: ${result.error}`);
  }
  console.log('='.repeat(30));
  process.exit(result.connected ? 0 : 1);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 